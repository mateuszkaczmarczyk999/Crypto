@model Array
@{
    ViewBag.Title = "Curency Market";
}
<body>
    <h2>Curency Market</h2>

<div class="container">
    <table class="table table-bordered">
        <tbody>
        @for (int i = 0; i < Model.Length; i++)
        {
            <tr>
                <th>@Model.GetValue(i).ToString().ToUpper()</th>

                @for (int j = 0; j < Model.Length; j++)
                {
                    if (i != j)
                    {
                        <td id=@i@j>_ @Model.GetValue(j).ToString().ToUpper()</td>
                    }
                }
            </tr>
        }

        </tbody>
    </table>
    <div id="chartContainer" style="height: 300px; width: 100%;"></div>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="~/Scripts/canvasjs.min.js"></script>

    <script>

        $(function() {
            
            var market = $.connection.marketHub;
            
            var eth_value;
            var btc_value;
            var ltc_value;

            var ethDataPoints = [];
            var btcDataPoints = [];
            var ltcDataPoints = [];

            market.client.updateRates = function(currencyRateArg) {
                if (parseInt(currencyRateArg.ChangeTo) == 0) {

                    if (parseInt(currencyRateArg.ChangeFrom) == 1) {
                        eth_value = currencyRateArg.Value;
                    } else if (parseInt(currencyRateArg.ChangeFrom) == 2) {
                        btc_value = currencyRateArg.Value;
                    } else {
                        ltc_value = currencyRateArg.Value;
                    }
                }

                var first_arrow;
                var second_arrow;
                var action = currencyRateArg.PriceAction;
                if (action == 1) {
                    first_arrow = '▲';
                    second_arrow = '▼';
                } else if (action == 2) {
                    first_arrow = '▼';
                    second_arrow = '▲';
                } else {
                    first_arrow = ' ';
                    second_arrow = ' ';
                }
                var first_value = currencyRateArg.Value;
                var first_id = currencyRateArg.ChangeFrom.toString() + currencyRateArg.ChangeTo.toString();
                var second_value = 1 / currencyRateArg.Value;
                var second_id = currencyRateArg.ChangeTo.toString() + currencyRateArg.ChangeFrom.toString();

                var first_text = $('#' + first_id).text();
                var second_text = $('#' + second_id).text();
                $('#' + first_id).text(first_text.replace('_', first_value + ' ' + first_arrow));
                $('#' + second_id).text(second_text.replace('_', second_value + ' ' + second_arrow));
            }

            //var chart = new CanvasJS.Chart("chartContainer", {
            //    title: {
            //        text: "CryptoCurrency Real-Time Rating.",
            //        fontSize: 30
            //    },
            //    animationEnabled: true,
            //    axisX: {
            //        gridColor: "Silver",
            //        tickColor: "silver",
            //
            //    },
            //    toolTip: {
            //        shared: true
            //    },
            //    theme: "theme2",
            //    axisY: {
            //        gridColor: "Silver",
            //        tickColor: "silver"
            //    },
            //    legend: {
            //        verticalAlign: "center",
            //        horizontalAlign: "right"
            //    },
            //    data: ratesData
            //});
            //
            //function updateChart() {
            //    var d = new Date();
            //    eth_dataPoints = { x: d.toLocaleTimeString(), y: eth_value };
            //    btc_dataPoints = { x: d.toLocaleTimeString(), y: btc_value };
            //    ltc_dataPoints = { x: d.toLocaleTimeString(), y: ltc_value };
            //
            //    eth_rates.dataPoints.push(eth_dataPoints);
            //    btc_rates.dataPoints.push(btc_dataPoints);
            //    ltc_rates.dataPoints.push(ltc_dataPoints);
            //
            //    ratesData = [eth_rates, btc_rates, ltc_rates];
            //    console.log(ratesData);
            //    
            //    chart.render();
            //}
            //
            //setInterval(updateChart, 1000); 

            var dps = []; // dataPoints

            var chart = new CanvasJS.Chart("chartContainer",{
                title :{
                    text: "Real-Time CryptoCurrency Rating"
                },			
                data: [{
                    type: "line",
                    showInLegend: true,
                    lineThickness: 2,
                    name: "ETH",
                    color: "#89a6d4",
                    dataPoints: ethDataPoints
                },{
                    type: "line",
                    showInLegend: true,
                    name: "BTC",
                    color: "#49796b",
                    lineThickness: 2,
                    dataPoints: btcDataPoints
                },{
                    type: "line",
                    showInLegend: true,
                    name: "LTC",
                    color: "#ff7f50",
                    lineThickness: 2,
                    dataPoints: ltcDataPoints
                }]
            });

            var xVal = 0;
            var yVal = 100;	
            var updateInterval = 500;
            var dataLength = 500; // number of dataPoints visible at any point

            var updateChart = function (count) {
                count = count || 1;
                // count is number of times loop runs to generate random dataPoints.
			
                for (var j = 0; j < count; j++) {	
                    yVal = yVal +  Math.round(5 + Math.random() *(-5-5));
                    ethDataPoints.push({
                        x: xVal,
                        y: eth_value
                    });
                    btcDataPoints.push({
                        x: xVal,
                        y: btc_value
                    });
                    ltcDataPoints.push({
                        x: xVal,
                        y: ltc_value
                    });
                    xVal++;
                };
                if (dps.length > dataLength)
                {
                    dps.shift();				
                }
			
                chart.render();		

            };

            // generates first set of dataPoints
            updateChart(dataLength); 

            // update chart after specified time. 
            setInterval(function(){updateChart()}, updateInterval); 

            $.connection.hub.start().done(function() {
            });
        });
    </script>
}





