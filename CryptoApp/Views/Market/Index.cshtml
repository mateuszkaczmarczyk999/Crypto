@model Array
@{
    ViewBag.Title = "Curency Market";
}
<body>
    <h2>Curency Market</h2>

<div class="container">
    <table class="table table-bordered">
        <tbody>
        @for (int i = 0; i < Model.Length; i++)
        {
            <tr>
                <th>@Model.GetValue(i).ToString().ToUpper()</th>

                @for (int j = 0; j < Model.Length; j++)
                {
                    if (i != j)
                    {
                        <td><span id=@i@j></span> @Model.GetValue(j).ToString().ToUpper() 
                            @if (Context.User.Identity.IsAuthenticated)
                            {
                                <button onclick="showTransactionWindow('Eur','Btc')" class="btn btn-info" style="float: right; display: none;" align="right" >Buy</button>
                            }
                        </td>                                                    
                    }
                }
            </tr>
        }

        </tbody>
    </table>
    
    <div>
        <button id="month" type="button" class="btn btn-primary active" disabled>Month</button>
        <button id="week" type="button" class="btn btn-primary active" disabled>Week</button>
        <button id="day" type="button" class="btn btn-primary active">Day</button>
        <button id="hour" type="button" class="btn btn-primary active">Hour</button>
        <button id="minute" type="button" class="btn btn-primary active">Minute</button>
        <button id="live" type="button" class="btn btn-primary active">Live</button>
    </div>
    <div id="chartEth" style="height: 300px; width: 100%;"></div>
    <div id="chartBtc" style="height: 300px; width: 100%;"></div>
    <div id="chartLtc" style="height: 300px; width: 100%;"></div>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="~/Scripts/canvasjs.min.js"></script>

    <script>

        function isNumeric(n) {
            return !isNaN(n) && n !== "" && n !== null;
        }

        var showTransactionWindow = function(toBuy, toSell) {
            var value = prompt("How much " + toBuy.toString() + " would you like to buy?");
            if (isNumeric(value)) {
                var confirmation = confirm("Do you want to buy " + value + " " + toBuy + " for " + toSell + "?");
                if (confirmation) {
                    
                }
            } 
            else {
                alert("Not a valid quantity!");
            }
        }


        $(function() {

            //async get method with callback function

            function httpGetAsync(theUrl, callback) {
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.onreadystatechange = function () {
                    if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
                        var dataJSON = JSON.parse(xmlHttp.responseText);
                        callback(dataJSON);
                    }
                }
                xmlHttp.open("GET", theUrl, true);
                xmlHttp.send(null);
            }

            //chart setup

            var chartEth = {
                title: { text: "Ethereum in €" },
                axisX:{
                    title : "Time"
                },
                axisY:{
                    title: "Euro",
                    includeZero: false
                },
                data: []
            }

            var chartBtc = {
                title: { text: "BitCoin in €" },
                axisY: {
                    title: "Euro",
                    includeZero: false
                },
                data: []
            }

            var chartLtc = {
                title: { text: "LiteCoin in €" },
                axisY: {
                    title: "Euro",
                    includeZero: false
                },
                data: []
            }

            //var chartAll = new CanvasJS.Chart("chartContainer", chartObject);
            var ethChart = new CanvasJS.Chart("chartEth", chartEth);
            var btcChart = new CanvasJS.Chart("chartBtc", chartBtc);
            var ltcChart = new CanvasJS.Chart("chartLtc", chartLtc);

            function initCurrencyChartObject(currencyName, colorHex) {
                var rateObject = {
                    type: "area",
                    fillOpacity: .3, 
                    xValueType: "dateTime",
                    showInLegend: true,
                    lineThickness: 2,
                    name: currencyName,
                    color: colorHex,
                    dataPoints: []
                }
                return rateObject;
            }

            // init currency rates on chart

            function updateDatapoints(JSONdata, currencyName, colorHex, chart, chartObject) {
                var rateslist = JSONdata.Data;
                var rateObject = initCurrencyChartObject(currencyName, colorHex);
                for (var i = 0; i < rateslist.length; i++) {
                    var date = new Date(rateslist[i].time * 1000);
                    rateObject.dataPoints.push({
                        x: date.getTime(),
                        y: rateslist[i].high
                    });
                }
                chartObject.data.push(rateObject);
                chart.render();
            }

            function fillChart(ethUrl, btcUrl, ltcUrl) {
                chartEth.data = [];
                chartBtc.data = [];
                chartLtc.data = [];
                httpGetAsync(ethUrl, (data) => updateDatapoints(data, "ETH", "#f2b81e", ethChart, chartEth));
                httpGetAsync(btcUrl, (data) => updateDatapoints(data, "BTC", "#2d66f1", btcChart, chartBtc));
                httpGetAsync(ltcUrl, (data) => updateDatapoints(data, "LTC", "#ff1493", ltcChart, chartLtc));
            }

            function dayRates() {
                chartSubTitle = "Month Rates";
                var ethUrl =
                    "https://min-api.cryptocompare.com/data/histoday?fsym=ETH&tsym=EUR&limit=30&aggregate=1&e=CCCAGG";
                var btcUrl =
                    "https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=EUR&limit=30&aggregate=1&e=CCCAGG";
                var ltcUrl =
                    "https://min-api.cryptocompare.com/data/histoday?fsym=LTC&tsym=EUR&limit=30&aggregate=1&e=CCCAGG";
                fillChart(ethUrl, btcUrl, ltcUrl);
            }

            function hourRates() {
                chartSubTitle = "Hour Rates";
                var ethUrl =
                    "https://min-api.cryptocompare.com/data/histohour?fsym=ETH&tsym=EUR&limit=24&aggregate=1&e=CCCAGG";
                var btcUrl =
                    "https://min-api.cryptocompare.com/data/histohour?fsym=BTC&tsym=EUR&limit=24&aggregate=1&e=CCCAGG";
                var ltcUrl =
                    "https://min-api.cryptocompare.com/data/histohour?fsym=LTC&tsym=EUR&limit=24&aggregate=1&e=CCCAGG";
                fillChart(ethUrl, btcUrl, ltcUrl);
            }

            function minuteRates() {
                chartSubTitle = "Minute Rates";
                var ethUrl =
                    "https://min-api.cryptocompare.com/data/histominute?fsym=ETH&tsym=EUR&limit=60&aggregate=1&e=CCCAGG";
                var btcUrl =
                    "https://min-api.cryptocompare.com/data/histominute?fsym=BTC&tsym=EUR&limit=60&aggregate=1&e=CCCAGG";
                var ltcUrl =
                    "https://min-api.cryptocompare.com/data/histominute?fsym=LTC&tsym=EUR&limit=60&aggregate=1&e=CCCAGG";
                fillChart(ethUrl, btcUrl, ltcUrl);
            }

            //init table rating data

            var ethLiveRate;
            var btcLiveRate;
            var ltcLiveRate;

            function initRates() {
                var eurRateUrl = "https://min-api.cryptocompare.com/data/price?fsym=EUR&tsyms=ETH,BTC,LTC";
                var ethRateUrl = "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=EUR,BTC,LTC";
                var btcRateUrl = "https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=EUR,ETH,LTC";
                var ltcRateUrl = "https://min-api.cryptocompare.com/data/price?fsym=LTC&tsyms=EUR,ETH,BTC";
                httpGetAsync(eurRateUrl, initEurRow);
                httpGetAsync(ethRateUrl, initEthRow);
                httpGetAsync(btcRateUrl, initBtcRow);
                httpGetAsync(ltcRateUrl, initLtcRow);
            }

            function initEurRow(data) {
                var eth = data.ETH;
                ethLiveRate = data.ETH;
                var btc = data.BTC;
                btcLiveRate = data.BTC;
                var ltc = data.LTC;
                ltcLiveRate = data.LTC;
                $('#01').text(eth);
                $('#02').text(btc);
                $('#03').text(ltc);
            }

            function initEthRow(data) {
                var eur = formatRates(data.EUR, 6);
                var btc = formatRates(data.BTC, 6);
                var ltc = formatRates(data.LTC, 6);
                $('#10').text(eur);
                $('#12').text(btc);
                $('#13').text(ltc);
                ethLiveRate = eur;
            }

            function initBtcRow(data) {
                var eur = formatRates(data.EUR, 6);
                var eth = formatRates(data.ETH, 6);
                var ltc = formatRates(data.LTC, 6);
                $('#20').text(eur);
                $('#21').text(eth);
                $('#23').text(ltc);
                btcLiveRate = eur;
            }

            function initLtcRow(data) {
                var eur = formatRates(data.EUR, 6);
                var eth = formatRates(data.ETH, 6);
                var btc = formatRates(data.BTC, 6);
                $('#30').text(eur);
                $('#31').text(eth);
                $('#32').text(btc);
                ltcLiveRate = eur;
            }

            function formatRates(value, numberFix) {
                return parseFloat(Math.round(value * 1000000) / 1000000).toFixed(numberFix);
            }

            //real time table update

            var market = $.connection.marketHub;

            function updateLiveRate(currencyRateArg) {
                if (parseInt(currencyRateArg.ChangeTo) == 0 && currencyRateArg.Value != undefined) {
                    if (parseInt(currencyRateArg.ChangeFrom) == 1) {
                        ethLiveRate = currencyRateArg.Value;
                    } else if (parseInt(currencyRateArg.ChangeFrom) == 2) {
                        btcLiveRate = currencyRateArg.Value;
                    } else {
                        ltcLiveRate = currencyRateArg.Value;
                    }
                }
            }

            market.client.updateRates = function (currencyRateArg) {

                updateLiveRate(currencyRateArg);

                var first_arrow;
                var second_arrow;
                var action = currencyRateArg.PriceAction;
                if (action == 1) {
                    first_arrow = '▲';
                    second_arrow = '▼';
                } else if (action == 2) {
                    first_arrow = '▼';
                    second_arrow = '▲';
                } else {
                    first_arrow = ' ';
                    second_arrow = ' ';
                }
                var first_value = formatRates(currencyRateArg.Value, 6);
                var first_id = currencyRateArg.ChangeFrom.toString() + currencyRateArg.ChangeTo.toString();
                var second_value = formatRates(1 / currencyRateArg.Value, 6);
                var second_id = currencyRateArg.ChangeTo.toString() + currencyRateArg.ChangeFrom.toString();

                $('#' + first_id).text(first_value + ' ' + first_arrow);
                $('#' + second_id).text(second_value + ' ' + second_arrow);
            }

            function clearChart() {
                chartEth.data = [];
                chartBtc.data = [];
                chartLtc.data = [];
                chartEth.data.push(initCurrencyChartObject("ETH", "#f2b81e"));
                chartBtc.data.push(initCurrencyChartObject("BTC", "#2d66f1"));
                chartLtc.data.push(initCurrencyChartObject("LTC", "#ff1493"));
            }

            var liveUpdateChart = function () {

                var currentDate = new Date();

                chartEth.data[0].dataPoints.push({
                    x: currentDate.getTime(),
                    y: ethLiveRate
                });
                chartBtc.data[0].dataPoints.push({
                    x: currentDate.getTime(),
                    y: btcLiveRate
                });
                chartLtc.data[0].dataPoints.push({
                    x: currentDate.getTime(),
                    y: ltcLiveRate
                });

                if (chartEth.data[0].dataPoints.length > 60) {
                    chartEth.data[0].dataPoints.shift();
                }
                if (chartBtc.data[0].dataPoints.length > 60) {
                    chartBtc.data[0].dataPoints.shift();
                }
                if (chartLtc.data[0].dataPoints.length > 60) {
                    chartLtc.data[0].dataPoints.shift();
                }
                ethChart.render();
                btcChart.render();
                ltcChart.render();
            };

            var intrval;

            $('#month').click(() => alert("month"));
            $('#week').click(() => alert("week"));
            $('#day').click(function () {
                clearInterval(intrval);
                clearChart();
                dayRates();
            });
            $('#hour').click(function () {
                clearInterval(intrval);
                clearChart();
                hourRates();
            });
            $('#minute').click(function () {
                clearInterval(intrval);
                clearChart();
                minuteRates();
            });
            $('#live').click(function () {
                clearInterval(intrval);
                clearChart();
                intrval = setInterval(liveUpdateChart, 2500);
            });

            $.connection.hub.start().done(function () {
                clearInterval(intrval);
                clearChart();
                initRates();
                dayRates();
            });
        });
    </script>
}





