@model Array
@{
    ViewBag.Title = "Curency Market";
}
<body>
    <h2>Curency Market</h2>

<div class="container">
    <table class="table table-bordered">
        <tbody>
        @for (int i = 0; i < Model.Length; i++)
        {
            <tr>
                <th>@Model.GetValue(i).ToString().ToUpper()</th>

                @for (int j = 0; j < Model.Length; j++)
                {
                    if (i != j)
                    {
                        <td id=@i@j>_ @Model.GetValue(j).ToString().ToUpper()</td>
                    }
                }
            </tr>
        }

        </tbody>
    </table>
    <div id="chartContainer" style="height: 300px; width: 100%;"></div>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script src="~/Scripts/canvasjs.min.js"></script>

    <script>

        $(function() {

            var market = $.connection.marketHub;

            market.client.updateRates = function(currencyRateArg) {
                var first_arrow;
                var second_arrow;
                var action = currencyRateArg.PriceAction;
                if (action == 1) {
                    first_arrow = '▲';
                    second_arrow = '▼';
                } else if (action == 2) {
                    first_arrow = '▼';
                    second_arrow = '▲';
                } else {
                    first_arrow = ' ';
                    second_arrow = ' ';
                }
                var first_value = currencyRateArg.Value;
                var first_id = currencyRateArg.ChangeFrom.toString() + currencyRateArg.ChangeTo.toString();
                var second_value = 1 / currencyRateArg.Value;
                var second_id = currencyRateArg.ChangeTo.toString() + currencyRateArg.ChangeFrom.toString();

                console.log(first_id + '-' + first_value);
                console.log(second_id + '-' + second_value);
                var first_text = $('#' + first_id).text();
                var second_text = $('#' + second_id).text();
                $('#' + first_id).text(first_text.replace('_', first_value + ' ' + first_arrow));
                $('#' + second_id).text(second_text.replace('_', second_value + ' ' + second_arrow));
            }

            var chart = new CanvasJS.Chart("chartContainer", {
                theme: "theme2",
                zoomEnabled: true,
                animationEnabled: true,
                title: {
                    text: "Line Chart in ASP.Net MVC using CanvasJS"
                },
                subtitles: [
                    {
                        text: "Try Zooming and Panning"
                    }
                ],
                data: [
                    {
                        type: "line",

                        dataPoints: [
                            { x: 10, y: 71 },
                            { x: 20, y: 55 },
                            { x: 30, y: 50 },
                            { x: 40, y: 65 },
                            { x: 50, y: 95 },
                            { x: 60, y: 68 },
                            { x: 70, y: 28 },
                            { x: 80, y: 34 },
                            { x: 90, y: 14 },
                            { x: 100, y: 33 },
                            { x: 110, y: 42 },
                            { x: 120, y: 62 },
                            { x: 130, y: 70 },
                            { x: 140, y: 85 },
                            { x: 150, y: 58 },
                            { x: 160, y: 34 },
                            { x: 170, y: 24 },
                            { x: 180, y: 33 },
                            { x: 190, y: 28 },
                            { x: 200, y: 42 },
                        ],
                    }
                ]
            });
            chart.render();


        console.log(market);
        $.connection.hub.start().done(function() {
        });
    });
    </script>
}





